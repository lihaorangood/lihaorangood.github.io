(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{538:function(s,t,n){"use strict";n.r(t);var e=n(5),a=Object(e.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h3",{attrs:{id:"题目描述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#题目描述"}},[s._v("#")]),s._v(" 题目描述")]),s._v(" "),n("p",[s._v("题目链接："),n("a",{attrs:{href:"https://leetcode-cn.com/problems/longest-common-prefix/",target:"_blank",rel:"noopener noreferrer"}},[s._v("最长公共前缀"),n("OutboundLink")],1)]),s._v(" "),n("p",[s._v("题目描述我用截图leetcode的为主，所以题目如下图")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2673c183e91b43cda78cc1f4db974570~tplv-k3u1fbpfcp-watermark.image",alt:"image.png"}})]),s._v(" "),n("h3",{attrs:{id:"思路分析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#思路分析"}},[s._v("#")]),s._v(" 思路分析")]),s._v(" "),n("p",[s._v("因为求前缀，所以要满足这个前缀要在数组中所有项都能indexOf、includes到，是所有项的共同子集")]),s._v(" "),n("p",[s._v("1.特殊情况：首先判断判断空数组的情况 直接返回''，如果有''子项也是返回''")]),s._v(" "),n("p",[s._v("2.把第一项拿出来切割遍历，去判断切割出来的字符串是否满足包含全部项")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9b32add0954c4118807017fe6652cc58~tplv-k3u1fbpfcp-watermark.image",alt:"image.png"}}),s._v("\n傻了 是所有项都是重头开始计算 而我这样的写法只能满足第一项是从头开始 把includes改成indexOf===0能搜到且是第一位 貌似可以试试 果然如下图")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b648092ca0904d16be939933b963c40a~tplv-k3u1fbpfcp-watermark.image",alt:"image.png"}}),s._v("\n发现这样就满足条件了")]),s._v(" "),n("h3",{attrs:{id:"ac-代码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ac-代码"}},[s._v("#")]),s._v(" AC 代码")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("/**\n * @param {string[]} strs\n * @return {string}\n */\nvar longestCommonPrefix = function(strs) {\n   if(!strs.length||strs.includes('')){\n       return ''\n   }\n   let str1 = strs[0]\n   let len = str1.length\n   let result=''\n   for(let i=0;i<len;i++){\n       let str2 = str1.slice(0,i+1)\n       let flag=strs.every(item=>{\n           return item.indexOf(str2)===0\n       })\n       if(flag){\n           result=str2\n       }\n   }\n   return result\n};\n\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br")])])])}),[],!1,null,null,null);t.default=a.exports}}]);