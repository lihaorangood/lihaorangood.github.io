(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{540:function(t,s,n){"use strict";n.r(s);var a=n(5),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"什么是-js-执行上下文"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么是-js-执行上下文"}},[t._v("#")]),t._v(" 什么是 JS 执行上下文")]),t._v(" "),n("blockquote",[n("p",[t._v("简而言之就是 JS 代码执行的环境")])]),t._v(" "),n("h3",{attrs:{id:"js-执行上下文的类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#js-执行上下文的类型"}},[t._v("#")]),t._v(" JS 执行上下文的类型")]),t._v(" "),n("ol",[n("li",[t._v("全局执行上下文\n"),n("blockquote",[n("p",[t._v("默认或者基础的上下文 任何不在函数内部的代码都在全局上下文的执行环境中, 全局上下文会执行两件事， 创建 window 对象 并且设置 this 的值等于这个全局对象 一个程序中只会有一个全局上下文")])])]),t._v(" "),n("li",[t._v("函数执行上下文\n"),n("blockquote",[n("p",[t._v("每当一个函数"),n("strong",[t._v("调用")]),t._v("时 都会为该函数创建一个新的上下文， 每个函数都有他自己的执行上下文， 不过是在函数调用时创建的， 函数上下文可以有任意多个。")])])]),t._v(" "),n("li",[t._v("Eval 函数执行上下文\n"),n("blockquote",[n("p",[t._v("eval 函数内部执行创建属于自己的上下文。（使用较少 不做讨论）")])])])]),t._v(" "),n("h3",{attrs:{id:"执行栈"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#执行栈"}},[t._v("#")]),t._v(" 执行栈")]),t._v(" "),n("blockquote",[n("p",[t._v("执行栈，也就是在其它编程语言中所说的“调用栈”，是一种拥有 LIFO（后进先出）数据结构的栈，被用来存储代码运行时创建的所有执行上下文。\n当 JavaScript 引擎第一次遇到你的脚本时，它会创建一个全局的执行上下文并且压入当前执行栈。每当引擎遇到一个函数调用，它会为该函数创建一个新的执行上下文并压入栈的顶部。\n引擎会执行那些执行上下文位于栈顶的函数。当该函数执行结束时，执行上下文从栈中弹出，控制流程到达当前栈中的下一个上下文。")])]),t._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello World!'")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("first")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Inside first function'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("second")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Again inside first function'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("second")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Inside second function'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("first")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Inside Global Execution Context'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br")])]),n("p",[t._v("具体效果如图所示\n"),n("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/20/165f539572076fe3~tplv-t2oaga2asx-watermark.awebp",alt:"alt 执行栈图片"}})]),t._v(" "),n("h3",{attrs:{id:"如何创建上下文"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#如何创建上下文"}},[t._v("#")]),t._v(" 如何创建上下文")]),t._v(" "),n("ol",[n("li",[n("p",[t._v("this 指的绑定 this 指向为调用者 没有调用者则指向全局对象或者 undefined(strict mode)")])]),t._v(" "),n("li",[n("p",[t._v("创建词法环境 （let const fuciton）")]),t._v(" "),n("blockquote",[n("p",[t._v("词法环境是一种标识符和变量映射的结构 （这里的标识符指的是变量、函数名字和变量真正存储的内存地址之间的映射），词法环境一共有两种 一种是全局环境（没有外部缓解引用或者说外部引用环境为 null 拥有内建的 Object、Array 等） 并且 this 指向全局对象，一种是函数环境 函数内部定义的变量存储在环境记录器中， 引用的外部环境可能是全局对象也可能是外部函数。")])]),t._v(" "),n("blockquote",[n("p",[t._v("词法环境的内部有两个组件，一个是环境记录器（存储变量和函数声明的实际位置） 一个外部环境引用（访问父级作用域的词法环境）")])]),t._v(" "),n("blockquote",[n("p",[t._v("同词法环境一样 环境记录器也有两种类型 1. 声明式环境记录器（函数） 对象环境记录器（全局）")])])]),t._v(" "),n("li",[n("p",[t._v("创建变量环境 (var)")])])]),t._v(" "),n("h3",{attrs:{id:"执行阶段"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#执行阶段"}},[t._v("#")]),t._v(" 执行阶段")]),t._v(" "),n("ol",[n("li",[n("p",[t._v("在此阶段，完成对所有这些变量的分配，最后执行代码。")])]),t._v(" "),n("li",[n("p",[t._v("注意 — 在执行阶段，如果 JavaScript 引擎不能在源码中声明的实际位置找到 let 变量的值，它会被赋值为 undefined。")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);